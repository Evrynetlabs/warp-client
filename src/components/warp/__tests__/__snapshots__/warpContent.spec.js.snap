// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WarpContent When clicking a transfer button When isToEvrynet is false When source account balance is invalid should match an invalid feedback snapshot 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={true}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            >
              Evrynet secret key is required.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={true}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            >
              The recipient Stellar account has no undefined trustline.
            </Feedback>
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="1"
            />
            <Feedback
              type="invalid"
            >
              Insufficient Amount
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When clicking a transfer button When isToEvrynet is false When source account balance is valid should match a valid feedback snapshot 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={true}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            >
              Evrynet secret key is required.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={true}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            >
              The recipient Stellar account has no undefined trustline.
            </Feedback>
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={false}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="1"
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When clicking a transfer button When isToEvrynet is true When source account balance is invalid should match an invalid feedback snapshot 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={true}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="1"
            />
            <Feedback
              type="invalid"
            >
              Insufficient Amount
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When clicking a transfer button When isToEvrynet is true When source account balance is valid should match a valid feedback snapshot 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={true}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={false}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="1"
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is empty should display an invalid feedback 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            >
              Amount is required.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is less than zero should save an invalid state with a desired error message 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="-1"
            />
            <Feedback
              type="invalid"
            >
              Amount must be greater than zero.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is less than zero should save an invalid state with a desired error message 2`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="-0.01"
            />
            <Feedback
              type="invalid"
            >
              Amount must be greater than zero.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is less than zero should save an invalid state with a desired error message 3`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="-1.2222"
            />
            <Feedback
              type="invalid"
            >
              Amount must be greater than zero.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is less than zero should save an invalid state with a desired error message 4`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="0"
            />
            <Feedback
              type="invalid"
            >
              Amount must be greater than zero.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is less than zero should save an invalid state with a desired error message 5`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="0.000"
            />
            <Feedback
              type="invalid"
            >
              Amount must be greater than zero.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is not a number should save an invalid state with a desired error message 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="--1.000"
            />
            <Feedback
              type="invalid"
            >
              Amount must be a number.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is not a number should save an invalid state with a desired error message 2`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="1.00--0000000"
            />
            <Feedback
              type="invalid"
            >
              Amount must be a number.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is not a number should save an invalid state with a desired error message 3`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="foo"
            />
            <Feedback
              type="invalid"
            >
              Amount must be a number.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is not a number should save an invalid state with a desired error message 4`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="bar"
            />
            <Feedback
              type="invalid"
            >
              Amount must be a number.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is not a number should save an invalid state with a desired error message 5`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="-."
            />
            <Feedback
              type="invalid"
            >
              Amount must be a number.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is not a number should save an invalid state with a desired error message 6`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="0.--1"
            />
            <Feedback
              type="invalid"
            >
              Amount must be a number.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount is zero should save an invalid state with a desired error message 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="0"
            />
            <Feedback
              type="invalid"
            >
              Amount must be greater than zero.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount precision exceeds limit decimal should save an invalid state with a desired error message 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="1.000"
            />
            <Feedback
              type="invalid"
            >
              Amount can only support a precision of 2 decimals.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent When input an amount When input an invalid amount When amount precision exceeds limit decimal should save an invalid state with a desired error message 2`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={true}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value="1.00000000"
            />
            <Feedback
              type="invalid"
            >
              Amount can only support a precision of 7 decimals.
            </Feedback>
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            >
              <option
                key="EVRY"
                value="EVRY"
              >
                EVRY
              </option>
            </FormControl>
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;

exports[`WarpContent should render correspondingly 1`] = `
<Form
  className="WarpContent__form"
  inline={false}
  name="form"
  onSubmit={[Function]}
>
  <CardBody
    className="WarpContent__form__content"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="sourceAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                From:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__src WarpContent__form__content__input"
              isInvalid={false}
              name="sourceAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="destinationAccountNumber"
          >
            <FormLabel
              column={false}
              srOnly={false}
            >
              <span>
                To:
              </span>
            </FormLabel>
            <FormControl
              className="WarpContent__form__content__input__dest WarpContent__form__content__input"
              isInvalid={false}
              name="destinationAccount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Account Number"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
      <ForwardRef
        className="WarpContent__form__content__amount"
        noGutters={false}
      >
        <Col>
          <FormGroup
            controlId="assetAmount"
          >
            <FormControl
              className="WarpContent__form__content__amount__input"
              isInvalid={false}
              name="amount"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="0.00"
              type="text"
              value=""
            />
            <Feedback
              type="invalid"
            />
          </FormGroup>
        </Col>
        <Col>
          <FormGroup
            controlId="assetSelection"
          >
            <FormControl
              as="select"
              name="asset"
              onChange={[Function]}
              value="EVRY"
            />
          </FormGroup>
        </Col>
      </ForwardRef>
    </Container>
  </CardBody>
  <CardFooter
    className="WarpContent__footer"
  >
    <Container
      fluid={true}
    >
      <ForwardRef
        noGutters={false}
      >
        <Col
          className="WarpContent__footer__btn"
        >
          <Button
            active={false}
            disabled={true}
            type="submit"
            variant="dark"
          >
            Transfer
          </Button>
        </Col>
      </ForwardRef>
    </Container>
  </CardFooter>
</Form>
`;
